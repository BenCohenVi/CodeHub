branhc:
        size = self.clientsock.recv(self.BUFSIZ)
        self.clientsock.send("Size Gotten")
        proInfo = self.clientsock.recv(self.BUFSIZ)
        self.clientsock.send("Info Gotten")
        proName = proInfo.split("^")[0]
        branchVer = proInfo.split("^")[1]
        extension = self.clientsock.recv(self.BUFSIZ)
        self.clientsock.send("Extension Gotten")
        size = int(size)
        current_Size = 0
        buffer = b""
        while current_Size < size:
            data = self.clientsock.recv(1024)
            if not data:
                break
            if len(data) + current_Size > size:
                data = data[:size - current_Size]
            buffer += data
            current_Size += len(data)
        self.clientsock.send(("Content Gotten"))
        if extension != "png":
            branchPath = self.PATH + "\\Projects\\" + proName + "\\"
            filesInDir = os.listdir(branchPath)
            bStart = int(branchVer.split(".")[0]) + int(
                branchVer.split(".")[1])
            branchName = filesInDir[bStart - 1]
            preBranch = self.PATH + "\\Projects\\" + proName + "\\" + branchName
            lastBranch = open(preBranch, "r")
            try:
                lastData = utils.restore_delta(lastBranch.read(), "ok", True)
            except:
                lastBranch = open(preBranch, "r")
                lastData = lastBranch.read()
            delta = utils.get_delta(lastData, buffer, True)
            branchPath = self.PATH+"\\Projects\\"+proName+"\\" + \
                branchVer.split(
                    ".")[0]+"_"+str(int(branchVer.split(".")[1])+1)+"."+extension
            with io.FileIO(branchPath, "w") as f:
                f.write(str(delta))
                f.close()
        else:
            branchPath = self.PATH+"\\Projects\\"+proName+"\\" + \
                branchVer.split(
                    ".")[0]+"_"+str(int(branchVer.split(".")[1])+1)+"."+extension
            with io.FileIO(branchPath, "w") as f:
                f.write(str(buffer))
                f.close()